"""
Teste espec√≠fico para verificar problemas de inicializa√ß√£o na UI
Simula o comportamento da UI ao criar e modificar StateConversation
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import dataclasses
from dataclasses import dataclass, field
from state.state import StateConversation

def test_ui_initialization_scenario():
    """Simula exatamente como a UI cria e modifica StateConversation"""
    
    print("\nüîç Testando cen√°rio de inicializa√ß√£o da UI...")
    
    # Cen√°rio 1: Cria√ß√£o vazia (como Mesop pode fazer)
    conv1 = StateConversation()
    print(f"‚úÖ Cria√ß√£o vazia: messageIds={conv1.messageIds}")
    
    # Teste de modifica√ß√£o
    try:
        conv1.message_ids_python.append("msg-1")
        print(f"‚úÖ Append funcionou: {conv1.messageIds}")
    except AttributeError as e:
        print(f"‚ùå ERRO no append: {e}")
        return False
    
    # Cen√°rio 2: Cria√ß√£o com dados
    conv2 = StateConversation(
        conversationId="test-123",
        messageIds=["existing-1", "existing-2"]
    )
    print(f"‚úÖ Cria√ß√£o com dados: messageIds={conv2.messageIds}")
    
    # Teste de modifica√ß√£o
    try:
        conv2.message_ids_python.append("msg-3")
        print(f"‚úÖ Append funcionou: {conv2.messageIds}")
    except AttributeError as e:
        print(f"‚ùå ERRO no append: {e}")
        return False
    
    # Cen√°rio 3: Verificar que N√ÉO podemos atribuir diretamente
    try:
        conv2.message_ids_python = ["nova", "lista"]
        print("‚ùå PROBLEMA: Atribui√ß√£o direta funcionou (n√£o deveria)")
        return False
    except AttributeError as e:
        print(f"‚úÖ Atribui√ß√£o direta bloqueada corretamente: {e}")
    
    # Cen√°rio 4: Teste de refer√™ncia vs c√≥pia
    ids_ref = conv2.message_ids_python
    ids_ref.append("via-ref")
    if "via-ref" in conv2.messageIds:
        print("‚úÖ Modifica√ß√£o via refer√™ncia funcionou")
    else:
        print("‚ùå ERRO: Refer√™ncia n√£o est√° funcionando")
        return False
    
    # Cen√°rio 5: Verificar que √© a mesma refer√™ncia
    if conv2.message_ids_python is conv2.messageIds:
        print("‚úÖ Propriedade retorna refer√™ncia direta (n√£o c√≥pia)")
    else:
        print("‚ùå ERRO: Propriedade est√° retornando c√≥pia!")
        return False
    
    return True

def test_mesop_stateclass_behavior():
    """Testa comportamento espec√≠fico com @me.stateclass"""
    print("\nüîç Testando comportamento de @dataclass...")
    
    # Simular como Mesop pode criar objetos
    conv = StateConversation()
    
    # Verificar atributos
    print(f"  conversationId: {conv.conversationId} (tipo: {type(conv.conversationId)})")
    print(f"  messageIds: {conv.messageIds} (tipo: {type(conv.messageIds)})")
    print(f"  message_ids_python: {conv.message_ids_python} (tipo: {type(conv.message_ids_python)})")
    
    # Verificar se s√£o a mesma refer√™ncia
    same_ref = conv.message_ids_python is conv.messageIds
    print(f"  Mesma refer√™ncia? {same_ref}")
    
    if not same_ref:
        print("‚ùå PROBLEMA ENCONTRADO: Propriedade n√£o retorna refer√™ncia!")
        return False
    
    return True

if __name__ == "__main__":
    print("=" * 60)
    print("üöÄ TESTE DE INICIALIZA√á√ÉO DA UI")
    print("=" * 60)
    
    success = True
    
    success = test_ui_initialization_scenario() and success
    success = test_mesop_stateclass_behavior() and success
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Propriedades mut√°veis funcionam corretamente")
        print("‚úÖ N√£o h√° problemas de inicializa√ß√£o")
    else:
        print("‚ùå PROBLEMAS ENCONTRADOS!")
    print("=" * 60)
    
    exit(0 if success else 1)